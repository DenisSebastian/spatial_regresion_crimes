{
  "hash": "10dfbeb94986c9255427b47b3008c088",
  "result": {
    "markdown": "# Funciones {#func}\n\n## spatial weights matrix {#sec-spatial-weights}\n\nThe `nb2listw` function supplements a neighbours list with spatial weights for the chosen coding scheme. The can.be.simmed helper function checks whether a spatial weights object is similar to symmetric and can be so transformed to yield real eigenvalues or for Cholesky decomposition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspatial_weights <-  function(city_df, nvec = 12,\n                             style = \"W\", longlat = F){\n  nb <- spdep::nb2listw(neighbours = spdep::knn2nb(\n    knn = spdep::knearneigh( x = city_df, k = nvec, longlat = F)), \n    style = style)\n  return(nb)\n}\n```\n:::\n\n\n\n## Funciones de Transformación {#sec-f-transform}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt_cub <-  function(x) x**(1/3)\nt_log1p <-  function(x) log1p(x)\nlag_spatial <-  function(x, nb){\n  as.numeric(spdep::lag.listw(x=nb, var=x))\n}\n```\n:::\n\n\n\n##  Quiebres de Jenks {#sec-jenks}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvals_jenk_breaks <-  function(x, deciles = 10, seed=1 ){\n  set.seed(seed)\n  \n  y <- cut( x,c(unique(getJenksBreaks(x,deciles)), Inf),\n            labels = F, include.lowest = T, right = F)\n  return(y)\n}\n```\n:::\n\n\n\n## ppp_maker {#sec-ppp-maker}\n\nPara transformar los datos espaciales de los delitos y las predicciones de los modelos se utilizó la función propia `ppp_maker()`, la cual utiliza el parámetro `ppp_predict = T` en caso que se quiera calcular `ppp` para la predicción. El valor es de predicción o delitos según sea el caso se clasfica con quiebres de jenks @sec-jenks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_maker <- function(model, city, delito, ppp_predict = T, w, nb){\n  deciles <- 10\n  city_sf <- city %>% st_as_sf() \n\n    \n  if(ppp_predict== T){\n    if (class(model)[1] == \"Sarlm\"){\n      ypred=as.numeric(predict(model, listw = nb, pred.type = \"TS\")**3)\n    }\n    if (class(model)[1] == \"glmerMod\"){\n      ypred=exp(predict(model))\n    }\n    city <- city_sf%>% \n      mutate(ypred= ypred)%>% \n      mutate(ypred_adj = vals_jenk_breaks(ypred)) %>% \n      filter(ypred_adj > 1) %>% \n      as(\"Spatial\")\n    # marks = city@data[,\"ypred_adj\"]\n  }else{\n    city <- city_sf %>%\n      mutate(delito_adj = vals_jenk_breaks(!!rlang::sym(delito))) %>%\n      filter(delito_adj>1) %>% \n      as(\"Spatial\")\n    # marks = city@data[,\"delito_adj\"]\n  }\n  \n  pts <- coordinates(city)\n  p <- ppp(pts[,1], pts[,2], window = w)\n  # ds_al <- density(p, adjust=.25)\n  # plot(ds_al, main='Densidad de Delito')\n  return(p)\n  \n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}