# Funciones {#func}

## spatial weights matrix {#sec-spatial-weights}

The `nb2listw` function supplements a neighbours list with spatial weights for the chosen coding scheme. The can.be.simmed helper function checks whether a spatial weights object is similar to symmetric and can be so transformed to yield real eigenvalues or for Cholesky decomposition.

```{r}
spatial_weights <-  function(city_df, nvec = 12,
                             style = "W", longlat = F){
  nb <- spdep::nb2listw(neighbours = spdep::knn2nb(
    knn = spdep::knearneigh( x = city_df, k = nvec, longlat = F)), 
    style = style)
  return(nb)
}
```


## Funciones de Transformación {#sec-f-transform}


```{r}
t_cub <-  function(x) x**(1/3)
t_log1p <-  function(x) log1p(x)
lag_spatial <-  function(x, nb){
  as.numeric(spdep::lag.listw(x=nb, var=x))
}
```


##  Quiebres de Jenks {#sec-jenks}

```{r}
vals_jenk_breaks <-  function(x, deciles = 10, seed=1 ){
  set.seed(seed)
  
  y <- cut( x,c(unique(getJenksBreaks(x,deciles)), Inf),
            labels = F, include.lowest = T, right = F)
  return(y)
}
```


## ppp_maker {#sec-ppp-maker}

Para transformar los datos espaciales de los delitos y las predicciones de los modelos se utilizó la función propia `ppp_maker()`, la cual utiliza el parámetro `ppp_predict = T` en caso que se quiera calcular `ppp` para la predicción. El valor es de predicción o delitos según sea el caso se clasfica con quiebres de jenks @sec-jenks.

```{r}
ppp_maker <- function(model, city, delito, ppp_predict = T, w, nb){
  deciles <- 10
  city_sf <- city %>% st_as_sf() 

    
  if(ppp_predict== T){
    if (class(model)[1] == "Sarlm"){
      ypred=as.numeric(predict(model, listw = nb, pred.type = "TS")**3)
    }
    if (class(model)[1] == "glmerMod"){
      ypred=exp(predict(model))
    }
    city <- city_sf%>% 
      mutate(ypred= ypred)%>% 
      mutate(ypred_adj = vals_jenk_breaks(ypred)) %>% 
      filter(ypred_adj > 1) %>% 
      as("Spatial")
    # marks = city@data[,"ypred_adj"]
  }else{
    city <- city_sf %>%
      mutate(delito_adj = vals_jenk_breaks(!!rlang::sym(delito))) %>%
      filter(delito_adj>1) %>% 
      as("Spatial")
    # marks = city@data[,"delito_adj"]
  }
  
  pts <- coordinates(city)
  p <- ppp(pts[,1], pts[,2], window = w)
  # ds_al <- density(p, adjust=.25)
  # plot(ds_al, main='Densidad de Delito')
  return(p)
  
}


```



